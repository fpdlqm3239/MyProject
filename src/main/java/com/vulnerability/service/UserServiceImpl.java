package com.vulnerability.service;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.ResponseBody;

import com.vulnerability.dao.UserDao;
import com.vulnerability.dao.UserRoleDao;
import com.vulnerability.dto.User;
import com.vulnerability.dto.UserRole;
import com.vulnerability.service.security.UserEntity;
import com.vulnerability.service.security.UserRoleEntity;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class UserServiceImpl implements UserService {
    
    private final UserDao userDao;
    private final UserRoleDao userRoleDao;

 
    public UserServiceImpl(UserDao userDao, UserRoleDao userRoleDao) {
        this.userDao = userDao;
        this.userRoleDao = userRoleDao;
    }

    @Override
    @Transactional
    public UserEntity getUser(String loginId) {
    	try {
        User user = userDao.getUserByLoginId(loginId);
        return new UserEntity(user.getLoginId(), user.getPassword());
    	} catch (Exception e) {
			return null;
		}
       
    }

    @Override
    @Transactional
    public List<UserRoleEntity> getUserRoles(String loginId) {
        List<UserRole> userRoles = userRoleDao.getUserRolesByloginId(loginId);
        List<UserRoleEntity> list = new ArrayList<>();

        for(UserRole userRole : userRoles) {
            list.add(new UserRoleEntity(loginId, userRole.getRoleName()));
        }
        return list;
    }
    
    @Override
    @Transactional(readOnly = false)
    public int addUser(User user, boolean isAdmin) {
    	
    	int num=0;
    	User selectedUser;
    	try {
    		num = userDao.insertUser(user);
    		
    		selectedUser = userDao.getUserByLoginId(user.getLoginId());
			int userId = selectedUser.getId();
	    	if(isAdmin) {
	    		userRoleDao.insertAdminRole(userId);
	    	}
	    	userRoleDao.insertUserRole(userId);
    	}catch (Exception e) {
			return num;
		}
    	return num;
    	
    }
    
    @Override
	@Transactional
	@ResponseBody
	public User getUserByLoginId(String loginId) {
    	User user = null;
    	try {
    		user = userDao.getUserByLoginId(loginId);
    	}catch (Exception e) {
			return user;
		}
		return user;
	}
    
    
  

	
    
    
    
    

}