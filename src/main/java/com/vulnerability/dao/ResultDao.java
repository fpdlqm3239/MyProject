package com.vulnerability.dao;

import java.util.Collections;
import java.util.List;
import java.util.Map;

import javax.sql.DataSource;

import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.stereotype.Repository;

import com.vulnerability.dto.Result;



@Repository
public class ResultDao {
	
	private NamedParameterJdbcTemplate jdbc;
	private SimpleJdbcInsert insert;
	private RowMapper<Result> rowmapper = BeanPropertyRowMapper.newInstance(Result.class);
	
	public ResultDao(DataSource dataSource) {
		this.jdbc = new NamedParameterJdbcTemplate(dataSource);
		this.insert = new SimpleJdbcInsert(dataSource).usingGeneratedKeyColumns("id").withTableName("result");
	}
	
	public List<Result> getResultByUserId(int userId) {
		Map<String,Object> param = Collections.singletonMap("userId", userId);
		List<Result> list = jdbc.query(ResultDaoSql.SELECT_BY_USER_ID,param , rowmapper);
		if (list.size() == 0) {
			list = null;
		}
		return list;
	}
	
	public Result getResultById(int id) {
		
		Result result = new Result();
		
		try {
		Map<String,Object> param = Collections.singletonMap("id", id);
		result = jdbc.queryForObject(ResultDaoSql.SELECT_BY_ID, param , rowmapper);
		} catch(Exception e) {
			return null;
		}
		return result;
	}
	
	public Result getResultByRequestId(int requestId) {
		Result result = new Result();
		try {
				Map<String,Object> param = Collections.singletonMap("requestId", requestId);
				result = jdbc.queryForObject(ResultDaoSql.SELECT_BY_REQUEST_ID, param , rowmapper);
			} catch(Exception e) {
				return null;
			}
			return result;
	}
	
	
	public void insertResult(Result result) {
		SqlParameterSource params = new BeanPropertySqlParameterSource(result);
		insert.execute(params);
	}
}
