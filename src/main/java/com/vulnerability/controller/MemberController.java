package com.vulnerability.controller;

import java.security.Principal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.WebAttributes;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.vulnerability.dto.Result;
import com.vulnerability.dto.User;
import com.vulnerability.service.ResultService;
import com.vulnerability.service.UserService;

@Controller
@RequestMapping(path = "/members")
public class MemberController {
	@Autowired
	UserService userService;
	@Autowired
	PasswordEncoder passwordEncoder;
	@Autowired
	ResultService resultService;
	
	@GetMapping("/loginform")
	public String loginform() {
		return "members/loginform";
	}
	
	@PostMapping("/loginerror")
	public String loginerror() {
		return "members/loginerror";
	}
	
	
	@GetMapping("/joinform")
	public String joinform(HttpServletRequest request, Model model) {
		boolean isUser = request.isUserInRole("ROLE_USER");
		model.addAttribute("isUser", isUser);
		return "members/joinform";
	}
	
	
	
	@PostMapping("/join")
	public String join(@ModelAttribute User user, Model model) {
		user.setPassword(passwordEncoder.encode(user.getPassword()));
		int num = userService.addUser(user, false);
		
		if(num == 0) {
			return "members/joinform";
		}
		return "members/welcome";		
	}
	
	@GetMapping("/loginsuccess")
	public String loginsuccess() {
		return "members/loginsuccess";
	}
	
	@RequestMapping("/logoutsuccess")
	public String logoutsuccess() {
		return "members/logoutsuccess";
	}
	
	@RequestMapping("/idcheck")
	@ResponseBody
	public Map<String, Object> idCheck(@RequestParam(value = "loginId") String loginId){
		
		Map<String, Object> map = new HashMap<String, Object>();
		User user = userService.getUserByLoginId(loginId);
		
		if(user ==null) {
			map.put("code", "true");
		}else {
			map.put("code", "false");
		}
		
		return map;
		
	}
	
	
	
	
	
	
	
	
}